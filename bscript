import os.path as op
import sys
import subprocess

if sys.version_info[0] < 3:
    from ConfigParser \
        import \
            ConfigParser
else:
    from configparser \
        import \
	    ConfigParser

from bento.commands import hooks

def set_revision(template):
    proc = subprocess.Popen('git rev-parse --short HEAD',
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE,
                            shell=True)
    repo_commit, _ = proc.communicate()
    # We write the installation commit even if it's empty
    cfg_parser = ConfigParser()
    cfg_parser.read(template.abspath())
    cfg_parser.set('commit hash', 'install_hash', repo_commit)

    output = template.change_ext("")
    output.parent.mkdir()
    out_file = open(output.abspath(), 'wt')
    try:
        cfg_parser.write(out_file)
    finally:
        out_file.close()
    return output

def make_git_commit_info(ctx):
    commit_template = ctx.make_source_node(op.join("IPython", ".git_commit_info.ini.in"))
    return set_revision(commit_template)

@hooks.pre_build
def pre_build(bld):
    commit_output = make_git_commit_info(bld)

    # Tell bento to register a new category 'git_info' of installed artefactsd
    bld.register_category("git_info")
    # Register outputs in the 'git_info' category under the name 'git_commit_info'
    bld.register_outputs("git_info", "git_commit_info", [commit_output])

@hooks.pre_sdist
def pre_sdist(ctx):
    commit_output = make_git_commit_info(ctx)
    ctx.register_source_node(commit_output, op.join("IPython", ".git_commit_info.ini"))
